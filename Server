package advisor;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.sun.net.httpserver.HttpServer;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.Scanner;

public class Main extends Server{
    public static void main(String[] args) throws IOException, InterruptedException {
        StringBuilder spotifyServer = new StringBuilder();
        spotifyServer.append("https://accounts.spotify.com");
        for (int i = 0; i < args.length; i += 2) {
            if ("-access".equals(args[i])) {
                spotifyServer.setLength(0);
                spotifyServer.append(args[i + 1]);
                break;
            } else {
                spotifyServer.setLength(0);
                spotifyServer.append("https://accounts.spotify.com");
            }
        }
        MenuWithOutAuth();
    }
    static void MenuWithOutAuth() throws IOException, InterruptedException {
        Scanner sc = new Scanner(System.in);

        boolean notEntered = true;
        while (notEntered) {
            String enteredOption = sc.nextLine();
            if(enteredOption.equals("exit")) {
                exit();
                return;
            } else if(!enteredOption.equals("auth")) {
                System.out.println("Please, provide access for application.");
                notEntered = true;
            } else {
                notEntered = false;
                Main st = new Main();
                st.authorization();
            }
        }
        Menu();
    }
    static void Menu(){
        Scanner sc = new Scanner(System.in);
        String enteredOption = sc.nextLine();
            switch (enteredOption) {
                case "new":
                    newReleases();
                    Menu();
                    break;
                case "featured":
                    featured();
                    Menu();
                    break;
                case "categories":
                    categories();
                    Menu();
                    break;
                case "playlists Mood":
                    playlistMood();
                    Menu();
                    break;
                case "exit":
                    exit();
                    return;
            }
        }
   static void newReleases(){
        System.out.println("---NEW RELEASES---");
       System.out.println("Mountains [Sia, Diplo, Labrinth]");
       System.out.println("Runaway [Lil Peep]");
       System.out.println("The Greatest Show [Panic! At The Disco]");
       System.out.println("All Out Life [Slipknot]");
    }
    static void featured(){
        System.out.println("---FEATURED---");
        System.out.println("Mellow Morning");
        System.out.println("Wake Up and Smell the Coffee");
        System.out.println("Monday Motivation");
        System.out.println("Songs to Sing in the Shower");
    }
    static void categories(){
        System.out.println("---CATEGORIES---");
        System.out.println("Top Lists");
        System.out.println("Pop");
        System.out.println("Mood");
        System.out.println("Latin");
    }
    static void playlistMood(){
        System.out.println("---MOOD PLAYLISTS---");
        System.out.println("Walk Like A Badass");
        System.out.println("Rage Beats");
        System.out.println("Arab Mood Booster");
        System.out.println("Sunday Stroll");
    }
    static void exit(){
        System.out.println("---GOODBYE!---");
    }
    void authorization() throws IOException, InterruptedException {
        authorize();
        System.out.println("---SUCCESS---");
        }
    }
